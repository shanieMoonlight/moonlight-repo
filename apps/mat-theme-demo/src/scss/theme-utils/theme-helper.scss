/**
 * @file Angular Material M3 Theme Setup Helper
 * 
 * This file provides utilities to define Angular Material M3 themes (light/dark) 
 * and integrate them with the CSS variable generation from _color-helper.scss.
 * 
 * ## Usage
 * 
 * 1. Define your M3 palettes (e.g., using `ng generate @angular/material:theme-color`).
 * 2. In your main styles file (typically styles.scss or material-theme.scss):
 *    @include setupTheme($primary-palette, $secondary-palette, $error-palette); // For default theme
 *    @include setupThemeAlternate('my-theme', $my-primary, $my-secondary, $my-error); // For alternate themes
 * 
 * ## Notes
 * - This helper assumes you have M3 palettes defined (maps with keys like 0, 10, ..., 100).
 * - It uses _color-helper.scss to generate CSS custom properties.
 */

@use '@angular/material' as _mat;
@use './color-helper' as _clrHelper;
@use 'sass:map'; // Import sass:map

// ===================================================================== //

/**
 * Creates an M3 light theme configuration.
 * @param {Map} $primary-palette - M3 Primary color palette.
 * @param {Map} $secondary-palette - M3 Secondary color palette.
 * @param {Map} $tertiary-palette - M3 Tertiary color palette.
 * @param {Map} $error-palette - M3 Error color palette.
 * @return {Map} Configured Angular Material M3 light theme object.
 */
@function _lightTheme(
  $primary-palette,
  $secondary-palette,
  $tertiary-palette,
  $error-palette
) {
  // Create the M3 theme object.
  @return _mat.define-light-theme(
    (
      color: (
        primary: $primary-palette,
        secondary: $secondary-palette,
        tertiary: $tertiary-palette, // Include tertiary for completeness if needed by components
        error: $error-palette,
      ),
      // Add typography or density configurations if needed here
      // typography: ...,
      // density: ...,
    )
  );
}

// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = //

/**
 * Creates an M3 dark theme configuration.
 * @param {Map} $primary-palette - M3 Primary color palette.
 * @param {Map} $secondary-palette - M3 Secondary color palette.
 * @param {Map} $tertiary-palette - M3 Tertiary color palette.
 * @param {Map} $error-palette - M3 Error color palette.
 * @return {Map} Configured Angular Material M3 dark theme object.
 */
@function _darkTheme(
  $primary-palette,
  $secondary-palette,
  $tertiary-palette,
  $error-palette
) {
  // Create the M3 theme object.
  @return _mat.define-dark-theme(
    (
      color: (
        primary: $primary-palette,
        secondary: $secondary-palette,
        tertiary: $tertiary-palette, // Include tertiary for completeness
        error: $error-palette,
      ),
      // Add typography or density configurations if needed here
    )
  );
}

// ===================================================================== //

/// Sets up the default Material Design M3 theme and generates CSS variables.
/// @param {Map} $palettes-map - The map containing all palettes (primary, secondary, etc.)
/// @param {String} $darkModeClass ['dark-mode'] - CSS class for dark mode activation.
@mixin setupTheme(
  $palettes-map, // The map containing all palettes (primary, secondary, etc.)
  $darkModeClass: dark-mode
) {
  // Extract individual palettes from the map
  $primary-palette: map.get($palettes-map, 'primary');
  $secondary-palette: map.get($palettes-map, 'secondary');
  $tertiary-palette: map.get($palettes-map, 'tertiary');
  $error-palette: map.get($palettes-map, 'error');

  // Define the M3 theme objects using the extracted palettes
  $themeLight: _lightTheme($primary-palette, $secondary-palette, $tertiary-palette, $error-palette);
  $themeDark: _darkTheme($primary-palette, $secondary-palette, $tertiary-palette, $error-palette);

  // Call the color helper, passing theme objects AND the extracted raw palettes
  @include _clrHelper.setupThemeColors(
    $themeLight,
    $themeDark,
    $primary-palette,
    $secondary-palette,
    $tertiary-palette,
    $error-palette,
    $darkModeClass
  );
}

// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = //

/// Sets up an alternate Material Design M3 theme scoped to a CSS class and generates CSS variables.
/// @param {String|Number} $themeClassSuffix - Suffix for the theme class (e.g., 'ocean', 2).
/// @param {Map} $palettes-map - The map containing all palettes for this alternate theme
/// @param {String} $darkModeClass ['dark-mode'] - CSS class for dark mode activation.
@mixin setupThemeAlternate(
  $themeClassSuffix,
  $palettes-map, // The map containing all palettes for this alternate theme
  $darkModeClass: dark-mode
) {
  // Extract individual palettes
  $primary-palette: map.get($palettes-map, 'primary');
  $secondary-palette: map.get($palettes-map, 'secondary');
  $tertiary-palette: map.get($palettes-map, 'tertiary');
  $error-palette: map.get($palettes-map, 'error');

  // Define the M3 theme objects
  $themeLight: _lightTheme($primary-palette, $secondary-palette, $tertiary-palette, $error-palette);
  $themeDark: _darkTheme($primary-palette, $secondary-palette, $tertiary-palette, $error-palette);

  // Call the color helper, passing themes AND extracted raw palettes
  @include _clrHelper.setupThemeColorsAlternate(
    $themeClassSuffix,
    $themeLight,
    $themeDark,
    $primary-palette,
    $secondary-palette,
    $tertiary-palette,
    $error-palette,
    $darkModeClass
  );
}

// ===================================================================== //
// Remove old M2-based mixins if they are no longer needed
/*
@mixin setupTheme($primaryPalette, $accentPalette, $tertiaryPalette: null) { ... } 
@mixin setupThemeAlternate($themeClassSuffix, $primaryPalette, $accentPalette, $tertiaryPalette: null) { ... }
@mixin setupThemeWithCustomWarn(...) { ... }
@mixin setupThemeWithCustomWarnAlternate(...) { ... }
*/
// ===================================================================== //
