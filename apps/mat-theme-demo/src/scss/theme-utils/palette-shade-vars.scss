@use 'sass:map';
@use 'sass:list';

/** 
 * Creates CSS custom properties for all shades of a color palette.
 * @param {Map} $palette - The color palette map.
 * @param {String} $prefix - The CSS variable prefix (e.g., 'colorPrimary').
 */
@mixin create-palette-shade-variables($palette, $prefix) {
  @each $shade, $color in $palette {
    // Only create variables for numeric shades
    @if type-of($shade) == number {
      --#{$prefix}-#{$shade}: #{$color};
    }
  }
}

/**
 * Extracts palette maps from the main palettes object and 
 * generates CSS custom properties for all shade values.
 * @param {Map} $palettes - The map containing all color palette types.
 */
@mixin generate-palette-shade-variables($palettes) {
  // Extract individual palettes from the map
  $primary-palette: map.get($palettes, 'primary');
  $secondary-palette: map.get($palettes, 'secondary');
  $tertiary-palette: map.get($palettes, 'tertiary');
  $error-palette: map.get($palettes, 'error');
  
  // Create variables for each palette type
  @include create-palette-shade-variables($primary-palette, 'colorPrimary');
  @include create-palette-shade-variables($secondary-palette, 'colorSecondary');
  @include create-palette-shade-variables($tertiary-palette, 'colorTertiary');
  @include create-palette-shade-variables($error-palette, 'colorError');
}

/**
 * Sets up palette shade variables on :root
 * @param {Map} $palettes - The map containing all color palettes.
 */
@mixin setup-palette-shades($palettes) {
  :root {
    @include generate-palette-shade-variables($palettes);
  }
}

/**
 * Sets up alternate theme palette shade variables scoped to a class
 * @param {String} $theme-class - The theme class name.
 * @param {Map} $palettes - The map containing all color palettes.
 */
@mixin setup-alternate-palette-shades($theme-class, $palettes) {
  .theme-#{$theme-class} {
    @include generate-palette-shade-variables($palettes);
  }
}