/**
 * @file Angular Material Theme to CSS Variables Converter (M3 Compatible)
 * 
 * This file provides utilities to bridge Angular Material M3 theming with CSS custom properties,
 * making it easier to use theme colors throughout the application using standard CSS.
 * 
 * ## Usage
 * 
 * 1. Define your M3 palettes and themes (light/dark).
 * 2. In your main styles file (typically styles.scss):
 *    @include setupThemeColors($light-theme, $dark-theme, $tertiary-palette); // Pass M3 theme objects
 * 
 * 3. In components, access colors via CSS variables:
 *    .my-element {
 *      background-color: var(--colorPrimary); // Corresponds to primary container or similar M3 slot
 *      color: var(--colorOnPrimary); // Corresponds to on-primary container or similar
 *    }
 * 
 * 4. For transparency effects, use the RGB variant:
 *    .my-overlay {
 *      background-color: rgba(var(--colorPrimaryRgb), 0.7);
 *    }
 * 
 * ## Available Variables (Example for Primary)
 * - --colorPrimary: Base color (e.g., primary container)
 * - --colorOnPrimary: Color for text/icons on primary
 * - --colorPrimaryRgb: RGB values for use with rgba()
 * - --colorPrimary-50 through --colorPrimary-900: Raw palette variants (if palette provided)
 * 
 * Additional utility variables:
 * - --colorBackground: Background color
 * - --colorSurface: Surface color
 * - --colorOnSurface: Text/icon color on surface
 * - --colorSurfaceVariant: Surface variant color
 * - --colorOnSurfaceVariant: Text/icon color on surface variant
 * - --colorOutline: Outline color
 * - --colorNavBg: Navigation background (derived from primary)
 * - --colorNavTxt: Navigation text (derived from on-primary)
 
 */

// For more information: https://material.angular.io/guide/theming
@use '@angular/material' as _mat;
@use 'sass:map';
@use 'sass:color'; // For color manipulation if needed

// ===================================================================== //

/**
 * Extracts RGB components from a color as a comma-separated string.
 * @param {Color} $color - The color to extract from 
 * @return {String} RGB components as "R, G, B" format for use in rgba()
 */
@function extractRGB($color) {
  @return "#{color.red($color)}, #{color.green($color)}, #{color.blue($color)}";
}

// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = //

// Generates CSS variables for a specific palette (e.g., primary, secondary)
// based on M3 theme roles.
@function _generatePaletteVarsFromTheme($theme, $paletteName, $cssPrefix) {
  $color-config: _mat.get-theme-color-config($theme);
  $palette-roles: map.get($color-config, $paletteName); // e.g., primary roles map

  $vars: ();

  // Map M3 roles to simpler CSS variable names
  $role-map: (
    'default': '', // Base color (e.g., primary)
    'on-': 'On', // Text/icon on base color (e.g., on-primary)
    'container': 'Container', // Container color (e.g., primary-container)
    'on-container': 'OnContainer', // Text/icon on container (e.g., on-primary-container)
  );

  @each $role, $cssSuffix in $role-map {
    $role-key: if($role == 'default', $paletteName, '#{$paletteName}-#{$role}');
    $role-key-on: if($role == 'default', 'on-#{$paletteName}', 'on-#{$paletteName}-#{$role}');

    @if map.has-key($palette-roles, $role-key) {
      $color: map.get($palette-roles, $role-key);
      $vars: map.merge($vars, (#{$cssPrefix}#{$cssSuffix}: $color));
      $vars: map.merge($vars, (#{$cssPrefix}#{$cssSuffix}Rgb: extractRGB($color)));
    }
    @if map.has-key($palette-roles, $role-key-on) {
       $on-color: map.get($palette-roles, $role-key-on);
       // Use 'On' prefix for the variable name for the 'on-' color
       $on-var-name: if($role == 'default', '#{$cssPrefix}On', '#{$cssPrefix}#{$cssSuffix}On');
       $vars: map.merge($vars, ($on-var-name: $on-color));
       $vars: map.merge($vars, (#{$on-var-name}Rgb: extractRGB($on-color)));
    }
  }

  @return $vars;
}

// Generates CSS variables for surface, background, error, etc. from M3 theme.
@function _generateSurfaceVarsFromTheme($theme) {
  $color-config: _mat.get-theme-color-config($theme);
  $surface-roles: map.get($color-config, surface); // Surface roles map
  $error-roles: map.get($color-config, error); // Error roles map

  $vars: (
    colorBackground: map.get($surface-roles, 'background'),
    colorBackgroundRgb: extractRGB(map.get($surface-roles, 'background')),
    colorSurface: map.get($surface-roles, 'surface'),
    colorSurfaceRgb: extractRGB(map.get($surface-roles, 'surface')),
    colorOnSurface: map.get($surface-roles, 'on-surface'),
    colorOnSurfaceRgb: extractRGB(map.get($surface-roles, 'on-surface')),
    colorSurfaceVariant: map.get($surface-roles, 'surface-variant'),
    colorSurfaceVariantRgb: extractRGB(map.get($surface-roles, 'surface-variant')),
    colorOnSurfaceVariant: map.get($surface-roles, 'on-surface-variant'),
    colorOnSurfaceVariantRgb: extractRGB(map.get($surface-roles, 'on-surface-variant')),
    colorOutline: map.get($surface-roles, 'outline'),
    colorOutlineRgb: extractRGB(map.get($surface-roles, 'outline')),
    colorError: map.get($error-roles, 'error'), // M3 error roles
    colorErrorRgb: extractRGB(map.get($error-roles, 'error')),
    colorOnError: map.get($error-roles, 'on-error'),
    colorOnErrorRgb: extractRGB(map.get($error-roles, 'on-error')),
    colorErrorContainer: map.get($error-roles, 'error-container'),
    colorErrorContainerRgb: extractRGB(map.get($error-roles, 'error-container')),
    colorOnErrorContainer: map.get($error-roles, 'on-error-container'),
    colorOnErrorContainerRgb: extractRGB(map.get($error-roles, 'on-error-container')),
    // Derived Nav colors (adjust logic if needed)
    colorNavBg: map.get(map.get($color-config, primary), 'primary'), // Use primary color for nav bg
    colorNavTxt: map.get(map.get($color-config, primary), 'on-primary') // Use on-primary for nav text
  );

  @return $vars;
}

// Generates the full map of CSS variables from an M3 theme object.
@function _generateColorMapM3($theme) {
  $primaryVars: _generatePaletteVarsFromTheme($theme, 'primary', 'colorPrimary');
  $secondaryVars: _generatePaletteVarsFromTheme($theme, 'secondary', 'colorSecondary');
  $tertiaryVars: _generatePaletteVarsFromTheme($theme, 'tertiary', 'colorTertiary');
  // Note: M3 uses 'error' palette roles, handled in surface vars
  $surfaceVars: _generateSurfaceVarsFromTheme($theme);

  $map: $primaryVars;
  $map: map.merge($map, $secondaryVars);
  $map: map.merge($map, $tertiaryVars);
  $map: map.merge($map, $surfaceVars);

  @return $map;
}

// ===================================================================== //

// Mixin to output CSS variables from a map.
@mixin _generateVariables($varsMap) {
  @each $property, $value in $varsMap {
    --#{$property}: #{$value};
  }
}

// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = //

/// Sets up Material Design M3 theme colors and adds matching CSS Properties to :root and the dark mode class.
/// @param {Map} $themeLight - The M3 light theme object (output of mat.define-light-theme).
/// @param {Map} $themeDark - The M3 dark theme object (output of mat.define-dark-theme).
/// @param {String} $darkModeClass ['dark-mode'] - The CSS class used to activate dark mode.
@mixin setupThemeColors(
  $themeLight,
  $themeDark,
  $darkModeClass: dark-mode
) {
  $colorsLight: _generateColorMapM3($themeLight);
  $colorsDark: _generateColorMapM3($themeDark);

  :root {
    // Apply light theme component styles globally
    @include _mat.all-component-themes($themeLight);
    // Output light theme CSS variables
    @include _generateVariables($colorsLight);
  }

  .#{$darkModeClass} {
    // Apply dark theme component styles when dark mode class is active
    @include _mat.all-component-themes($themeDark);
    // Output dark theme CSS variables
    @include _generateVariables($colorsDark);
  }
}

// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = //

/// Sets up Material Design M3 theme colors and adds matching CSS Properties scoped to a theme class.
/// These settings will only be applied when .theme-{$themeClassSuffix} is set on an element (e.g., 'body').
/// @param {String|Number} $themeClassSuffix - Suffix for the theme class (e.g., 'ocean', 2).
/// @param {Map} $themeLight - The M3 light theme object for this alternate theme.
/// @param {Map} $themeDark - The M3 dark theme object for this alternate theme.
/// @param {String} $darkModeClass ['dark-mode'] - The CSS class used to activate dark mode.
@mixin setupThemeColorsAlternate(
  $themeClassSuffix,
  $themeLight,
  $themeDark,
  $darkModeClass: dark-mode
) {
  $colorsLight: _generateColorMapM3($themeLight);
  $colorsDark: _generateColorMapM3($themeDark);

  .theme-#{$themeClassSuffix} {
    // Apply light theme component styles within this theme class
    @include _mat.all-component-themes($themeLight);
    // Output light theme CSS variables
    @include _generateVariables($colorsLight);

    // Apply dark theme styles when both theme class and dark mode class are active
    &.#{$darkModeClass} {
      @include _mat.all-component-themes($themeDark);
      @include _generateVariables($colorsDark);
    }
  }
}

// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = //
// Deprecated M2 functions kept for reference during migration, remove later.
/*
@function _generateMapFromPalette($palette, $colorName, $colorTextName) { ... } 
@function _generateColorMap($theme, $tertiaryPalette: _mat.m2-define-palette(_mat.$indigo-palette)) { ... }
@function _generateColorMapDark($themeDark) { ... }
*/
// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = //
