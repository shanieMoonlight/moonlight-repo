// simplified-theme.scss
@use 'sass:color';
@use 'sass:map';
@use '@angular/material' as mat;
@use '../theme-utils/direct-palette-mapper.scss' as mapper;

/**
 * Creates a simplified tonal palette from a base color
 * @param {Color} $base-color - The base color for the palette
 */
@function create-simple-palette($base-color) {
  $hue: color.hue($base-color);
  $saturation: color.saturation($base-color);
  $lightness: color.lightness($base-color);
  
  // Create a palette map
  $palette: (
    0: #000000,
    100: #ffffff,
  );
  
  // Generate main tone values
  $palette: map.set($palette, 10, color.adjust($base-color, $lightness: -45%));
  $palette: map.set($palette, 20, color.adjust($base-color, $lightness: -35%));
  $palette: map.set($palette, 30, color.adjust($base-color, $lightness: -25%));
  $palette: map.set($palette, 40, color.adjust($base-color, $lightness: -15%));
  $palette: map.set($palette, 50, $base-color);
  $palette: map.set($palette, 60, color.adjust($base-color, $lightness: 10%, $saturation: -10%));
  $palette: map.set($palette, 70, color.adjust($base-color, $lightness: 20%, $saturation: -15%));
  $palette: map.set($palette, 80, color.adjust($base-color, $lightness: 30%, $saturation: -20%));
  $palette: map.set($palette, 90, color.adjust($base-color, $lightness: 40%, $saturation: -30%));
  
  // Add intermediate tones
  $palette: map.set($palette, 25, color.mix(map.get($palette, 20), map.get($palette, 30)));
  $palette: map.set($palette, 35, color.mix(map.get($palette, 30), map.get($palette, 40)));
  $palette: map.set($palette, 95, color.mix(map.get($palette, 90), map.get($palette, 100), 60%));
  $palette: map.set($palette, 98, color.mix(map.get($palette, 95), map.get($palette, 100), 60%));
  $palette: map.set($palette, 99, color.mix(map.get($palette, 98), map.get($palette, 100), 60%));
  
  // Add special surface values
  $palette: map.set($palette, 4, color.mix(map.get($palette, 0), map.get($palette, 10), 40%));
  $palette: map.set($palette, 6, color.mix(map.get($palette, 0), map.get($palette, 10), 60%));
  $palette: map.set($palette, 12, color.mix(map.get($palette, 10), map.get($palette, 20), 20%));
  $palette: map.set($palette, 17, color.mix(map.get($palette, 10), map.get($palette, 20), 70%));
  $palette: map.set($palette, 22, color.mix(map.get($palette, 20), map.get($palette, 30), 20%));
  $palette: map.set($palette, 24, color.mix(map.get($palette, 20), map.get($palette, 30), 40%));
  $palette: map.set($palette, 87, color.mix(map.get($palette, 80), map.get($palette, 90), 70%));
  $palette: map.set($palette, 92, color.mix(map.get($palette, 90), map.get($palette, 95), 40%));
  $palette: map.set($palette, 94, color.mix(map.get($palette, 90), map.get($palette, 95), 80%));
  $palette: map.set($palette, 96, color.mix(map.get($palette, 95), map.get($palette, 98), 33%));
  
  @return $palette;
}

/**
 * Creates a neutral palette based on a main color
 * @param {Color} $main-color - The color to derive neutrals from
 */
@function create-neutral-palette($main-color) {
  // Create a desaturated version for neutrals
  $desaturated: color.adjust($main-color, $saturation: -90%);
  @return create-simple-palette($desaturated);
}

/**
 * Creates a complete theme palette set from just 3-4 colors
 * @param {Color} $primary - Primary color
 * @param {Color} $secondary - Secondary color
 * @param {Color} $tertiary - Tertiary color
 * @param {Color} $error - Optional error color (defaults to #B3261E)
 */
@function create-theme-palettes(
  $primary,
  $secondary,
  $tertiary,
  $error: #B3261E
) {
  // Create the main palettes
  $primary-palette: create-simple-palette($primary);
  $secondary-palette: create-simple-palette($secondary);
  $tertiary-palette: create-simple-palette($tertiary);
  $error-palette: create-simple-palette($error);
  
  // Create the neutral palettes
  $neutral-palette: create-neutral-palette($primary);
  $neutral-variant-palette: create-neutral-palette(
    color.adjust($primary, $hue: 15)
  );
  
  // Return the complete palette set
  @return (
    primary: $primary-palette,
    secondary: $secondary-palette,
    tertiary: $tertiary-palette,
    error: $error-palette,
    neutral: $neutral-palette,
    neutral-variant: $neutral-variant-palette
  );
}

/**
 * Creates a complete theme from just 3-4 colors and applies it
 * @param {Color} $primary - Primary color
 * @param {Color} $secondary - Secondary color
 * @param {Color} $tertiary - Tertiary color
 * @param {Color} $error - Optional error color
 * @param {String} $dark-mode-class - Class for dark mode
 * @param {Boolean} $include-shade-vars - Whether to include individual shade variables
 * @param {Boolean} $only-multiples-of-ten - Only include shades that are multiples of 10
 */
@mixin create-and-apply-theme(
  $primary,
  $secondary,
  $tertiary,
  $error: #B3261E,
  $dark-mode-class: 'dark-mode',
  $include-shade-vars: true,
  $only-multiples-of-ten: true
) {
  // Generate the palettes
  $palettes: create-theme-palettes($primary, $secondary, $tertiary, $error);
  
  // Apply theme using the direct-palette-mapper
  @include mapper.setup-direct-theme(
    $palettes,
    $dark-mode-class,
    $include-shade-vars,
    $only-multiples-of-ten
  );
}

/**
 * Creates a complete alternate theme from just 3-4 colors and applies it
 * @param {String} $theme-suffix - Class suffix for the theme (e.g. "violet-lime")
 * @param {Color} $primary - Primary color
 * @param {Color} $secondary - Secondary color
 * @param {Color} $tertiary - Tertiary color
 * @param {Color} $error - Optional error color
 * @param {String} $dark-mode-class - Class for dark mode
 * @param {Boolean} $include-shade-vars - Whether to include individual shade variables
 * @param {Boolean} $only-multiples-of-ten - Only include shades that are multiples of 10
 */
@mixin create-and-apply-alternate-theme(
  $theme-suffix,
  $primary,
  $secondary,
  $tertiary,
  $error: #B3261E,
  $dark-mode-class: 'dark-mode',
  $include-shade-vars: true,
  $only-multiples-of-ten: true
) {
  // Generate the palettes
  $palettes: create-theme-palettes($primary, $secondary, $tertiary, $error);
  
  // Apply theme using the direct-palette-mapper
  @include mapper.setup-direct-theme-alternate(
    $theme-suffix,
    $palettes,
    $dark-mode-class,
    $include-shade-vars,
    $only-multiples-of-ten
  );
}

/**
 * Creates a palette map for use with mat.theme()
 * @param {Color} $primary - Primary color
 * @param {Color} $secondary - Secondary color
 * @param {Color} $tertiary - Tertiary color
 * @param {Color} $error - Optional error color
 */
@function create-mat-theme-palette(
  $primary,
  $secondary,
  $tertiary,
  $error: #B3261E
) {
  @return create-theme-palettes($primary, $secondary, $tertiary, $error);
}