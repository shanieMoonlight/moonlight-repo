/* You can add global styles to this file, and also import other style files */
@use "@angular/material" as mat;
@use 'sass:map';
@use 'sass:color';

/**
 * Extracts RGB components from a color as a comma-separated string for use with rgba()
 */
@function extractRGB($color) {
  @return "#{color.red($color)}, #{color.green($color)}, #{color.blue($color)}";
}

/**
 * Creates CSS custom properties for all shades of a color palette.
 * @param {Map} $palette - The color palette map.
 * @param {String} $prefix - The CSS variable prefix (e.g., 'color-primary').
 * @param {Boolean} $only_multiples_of_ten - Only include shades that are multiples of 10 (0, 10, 20, etc.)
 */
@mixin create-palette-shade-variables($palette, $prefix, $only_multiples_of_ten: true) {
  @each $shade, $color in $palette {
    // Only create variables for numeric shades
    @if type-of($shade) == number {
      // Check if we should include only multiples of 10
      @if not $only_multiples_of_ten or $shade % 10 == 0 {
        --#{$prefix}-#{$shade}: #{$color};
      }
    }
  }
}

/**
 * Generates individual shade variables for all palette types
 */
@mixin generate-palette-shades($palettes, $only_multiples_of_ten: true) {
  // Extract individual palettes from the map
  $primary-palette: map.get($palettes, 'primary');
  $secondary-palette: map.get($palettes, 'secondary');
  $tertiary-palette: map.get($palettes, 'tertiary');
  $error-palette: map.get($palettes, 'error');
  
  // Create variables for each palette type using kebab-case naming
  @include create-palette-shade-variables($primary-palette, 'color-primary', $only_multiples_of_ten);
  @include create-palette-shade-variables($secondary-palette, 'color-secondary', $only_multiples_of_ten);
  @include create-palette-shade-variables($tertiary-palette, 'color-tertiary', $only_multiples_of_ten);
  @include create-palette-shade-variables($error-palette, 'color-error', $only_multiples_of_ten);
}

/**
 * Directly maps color values from M3 palettes to CSS variables
 * @param {Map} $palettes - The map containing all color palettes (primary, secondary, tertiary, etc.)
 * @param {Boolean} $is-dark - Whether to generate dark theme variables
 */
@mixin generate-color-vars-from-palettes($palettes, $is-dark: false) {
  // Get individual palettes from the map
  $primary-palette: map.get($palettes, 'primary');
  $secondary-palette: map.get($palettes, 'secondary');
  $tertiary-palette: map.get($palettes, 'tertiary');
  $error-palette: map.get($palettes, 'error');
  $neutral-palette: map.get($palettes, 'neutral');
  $neutral-variant-palette: map.get($palettes, 'neutral-variant');

  // M3 colors - Primary
  --mat-sys-primary: #{map.get($primary-palette, 80)};
  --mat-sys-on-primary: #{map.get($primary-palette, 20)};
  --mat-sys-primary-container: #{map.get($primary-palette, if($is-dark, 30, 90))};
  --mat-sys-on-primary-container: #{map.get($primary-palette, if($is-dark, 90, 10))};
  --mat-sys-primary-fixed: #{map.get($primary-palette, 90)};
  --mat-sys-primary-fixed-dim: #{map.get($primary-palette, 80)};
  --mat-sys-on-primary-fixed: #{map.get($primary-palette, 10)};
  --mat-sys-on-primary-fixed-variant: #{map.get($primary-palette, 30)};
  
  // M3 colors - Secondary
  --mat-sys-secondary: #{map.get($secondary-palette, 80)};
  --mat-sys-on-secondary: #{map.get($secondary-palette, 20)};
  --mat-sys-secondary-container: #{map.get($secondary-palette, if($is-dark, 30, 90))};
  --mat-sys-on-secondary-container: #{map.get($secondary-palette, if($is-dark, 90, 10))};
  --mat-sys-secondary-fixed: #{map.get($secondary-palette, 90)};
  --mat-sys-secondary-fixed-dim: #{map.get($secondary-palette, 80)};
  --mat-sys-on-secondary-fixed: #{map.get($secondary-palette, 10)};
  --mat-sys-on-secondary-fixed-variant: #{map.get($secondary-palette, 30)};
  
  // M3 colors - Tertiary
  --mat-sys-tertiary: #{map.get($tertiary-palette, 80)};
  --mat-sys-on-tertiary: #{map.get($tertiary-palette, 20)};
  --mat-sys-tertiary-container: #{map.get($tertiary-palette, if($is-dark, 30, 90))};
  --mat-sys-on-tertiary-container: #{map.get($tertiary-palette, if($is-dark, 90, 10))};
  --mat-sys-tertiary-fixed: #{map.get($tertiary-palette, 90)};
  --mat-sys-tertiary-fixed-dim: #{map.get($tertiary-palette, 80)};
  
  // M3 colors - Error
  --mat-sys-error: #{map.get($error-palette, 80)};
  --mat-sys-on-error: #{map.get($error-palette, 20)};
  --mat-sys-error-container: #{map.get($error-palette, if($is-dark, 30, 90))};
  --mat-sys-on-error-container: #{map.get($error-palette, if($is-dark, 90, 10))};
  
  // M3 Surface and background colors
  --mat-sys-background: #{map.get($neutral-palette, if($is-dark, 6, 99))};
  --mat-sys-on-background: #{map.get($neutral-palette, if($is-dark, 90, 10))};
  --mat-sys-surface: #{map.get($neutral-palette, if($is-dark, 6, 99))};
  --mat-sys-on-surface: #{map.get($neutral-palette, if($is-dark, 90, 10))};
  --mat-sys-surface-variant: #{map.get($neutral-variant-palette, if($is-dark, 30, 90))};
  --mat-sys-on-surface-variant: #{map.get($neutral-variant-palette, if($is-dark, 80, 30))};
  
  // M3 additional surface variants
  --mat-sys-surface-container: #{map.get($neutral-palette, if($is-dark, 12, 94))};
  --mat-sys-surface-container-low: #{map.get($neutral-palette, if($is-dark, 10, 96))};
  --mat-sys-surface-container-lowest: #{map.get($neutral-palette, if($is-dark, 4, 100))};
  --mat-sys-surface-container-high: #{map.get($neutral-palette, if($is-dark, 17, 92))};
  --mat-sys-surface-container-highest: #{map.get($neutral-palette, if($is-dark, 22, 90))};
  --mat-sys-surface-dim: #{map.get($neutral-palette, if($is-dark, 6, 87))};
  --mat-sys-surface-bright: #{map.get($neutral-palette, if($is-dark, 24, 98))};
  
  // M3 outline colors
  --mat-sys-outline: #{map.get($neutral-variant-palette, if($is-dark, 60, 50))};
  --mat-sys-outline-variant: #{map.get($neutral-variant-palette, if($is-dark, 30, 80))};
  
  // M3 inverse colors
  --mat-sys-inverse-primary: #{map.get($primary-palette, if($is-dark, 40, 80))};
  --mat-sys-inverse-surface: #{map.get($neutral-palette, if($is-dark, 90, 20))};
  --mat-sys-inverse-on-surface: #{map.get($neutral-palette, if($is-dark, 20, 95))};
  
  // M3 miscellaneous 
  --mat-sys-surface-tint: #{map.get($primary-palette, 80)};
  --mat-sys-scrim: #{map.get($neutral-palette, 0)};
  --mat-sys-shadow: #{map.get($neutral-palette, 0)};
  
  // Some additional useful values for Angular Material
  --mat-sys-neutral10: #{map.get($neutral-palette, 10)};
  --mat-sys-neutral-variant20: #{map.get($neutral-variant-palette, 20)};
  
  // Provide RGB values for transparency effects
  --mat-sys-primary-rgb: #{extractRGB(map.get($primary-palette, 80))};
  --mat-sys-on-primary-rgb: #{extractRGB(map.get($primary-palette, 20))};
  --mat-sys-surface-rgb: #{extractRGB(map.get($neutral-palette, if($is-dark, 6, 99)))};
  --mat-sys-on-surface-rgb: #{extractRGB(map.get($neutral-palette, if($is-dark, 90, 10)))};
}

/**
 * Sets up light and dark themes based on direct palette mapping.
 * @param {Map} $palettes - The map containing all color palettes.
 * @param {String} $darkModeClass - CSS class that activates dark mode.
 * @param {Boolean} $include-shade-vars - Whether to include individual shade variables.
 * @param {Boolean} $only_multiples_of_ten - Only include shade variables that are multiples of 10
 */
@mixin setup-direct-theme(
  $palettes, 
  $darkModeClass: 'dark-mode', 
  $include-shade-vars: true,
  $only_multiples_of_ten: true
) {
  // @include mat.theme(
  //   (
  //     color: $palettes
  //   )
  // );

  :root {
    @include generate-color-vars-from-palettes($palettes, false); // Light theme
    
    @if $include-shade-vars {
      @include generate-palette-shades($palettes, $only_multiples_of_ten); // Add shade variables
    }
  }
  
  // Apply default colors to the body element
  body {
    background: var(--mat-sys-surface);
    color: var(--mat-sys-on-surface);
  }
  
  .#{$darkModeClass} {
    @include generate-color-vars-from-palettes($palettes, true); // Dark theme
  }
}

/**
 * Sets up an alternate theme with direct palette mapping.
 * @param {String} $themeClassSuffix - Suffix for the theme class.
 * @param {Map} $palettes - The map containing all color palettes for this alternate theme.
 * @param {String} $darkModeClass - CSS class that activates dark mode.
 * @param {Boolean} $include-shade-vars - Whether to include individual shade variables.
 * @param {Boolean} $only_multiples_of_ten - Only include shade variables that are multiples of 10
 */
@mixin setup-direct-theme-alternate(
  $themeClassSuffix, 
  $palettes, 
  $darkModeClass: 'dark-mode',
  $include-shade-vars: true,
  $only_multiples_of_ten: true
) {

  
  .theme-#{$themeClassSuffix} {
    @include generate-color-vars-from-palettes($palettes, false); // Light theme
    
    @if $include-shade-vars {
      @include generate-palette-shades($palettes, $only_multiples_of_ten); // Add shade variables
    }
  }
  
  // Apply theme colors when body has the theme class
  body.theme-#{$themeClassSuffix} {
    background: var(--mat-sys-surface);
    color: var(--mat-sys-on-surface);
  }
    
  .theme-#{$themeClassSuffix}.#{$darkModeClass} {
    @include generate-color-vars-from-palettes($palettes, true); // Dark theme
  }
}