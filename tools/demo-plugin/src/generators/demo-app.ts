import * as fs from 'fs';
import { names, addProjectConfiguration, formatFiles, generateFiles, installPackagesTask, Tree, runExecutor, } from '@nx/devkit';
import { plural } from 'pluralize';
import * as path from 'path';
import { DemoAppGeneratorSchema, NoramlizedDemoAppGeneratorSchema } from './schema';
import { } from '@nx/js';
import { } from '@nx/angular';
import { applicationGenerator } from '@nx/angular/generators';
import { execSync } from 'child_process';

//##############################################//

function normalizeOptions(
  options: DemoAppGeneratorSchema
): NoramlizedDemoAppGeneratorSchema {
  const name = options.name;
  const directory = options.directory;
  const displayName = options.displayName || names(name).className;
  const displayNameShort = names(name).className;

  console.log(`names(name): `, names(name));


  return {
    ...options,
    name,
    directory: directory,
    displayName,
    displayNameShort,
    prefix: options.prefix || 'sb',
    port: options.port || 4200,
  };
}

//------------------------------//

async function addPwaSupportAsync(normalizedOptions: NoramlizedDemoAppGeneratorSchema) {
  try {
    console.log(`Adding PWA support to ${normalizedOptions.name}...`);
    execSync(`npx nx generate @angular/pwa:pwa --project=${normalizedOptions.name}`, {
      stdio: 'inherit'
    });
    console.log(`✅ PWA support added successfully!`);

  } catch (error) {
    console.error(`Failed to add PWA support: ${error}`);
  }

}

//------------------------------//

/**
 * Replaces the default PWA icons with custom Spider-Baby logo icons
 * @param appRoot The root path of the project
 * @returns A promise that resolves when the operation is complete
 */
async function replaceDefaultPwaIcons(appRoot: string): Promise<void> {
  try {
    console.log(`Replacing default PWA icons with Spider-Baby logo icons...`);

    // Path to the generated icons directory created by PWA schematic
    const generatedIconsDir = path.join(appRoot, 'public', 'icons');
    const originalIconsDir = path.join(appRoot, 'public', 'icons-original');

    console.log(`generatedIconsDir: ${generatedIconsDir}`);
    console.log(`originalIconsDir: ${originalIconsDir}`);
    console.log(`appRoot: ${appRoot}`);
    

    // 1. Check if generated icons folder exists
    if (!fs.existsSync(generatedIconsDir)) {
      console.log(`⚠️ No icons folder found at ${generatedIconsDir}. PWA may not be properly configured.`);
      return
    }

    console.log(`Removing default PWA icons from ${generatedIconsDir}...`);

    // 2. Delete the default icons generated by PWA schematic
    fs.rmSync(generatedIconsDir, { recursive: true, force: true });

    // 3. Check if we have custom icons to replace with
    if (!fs.existsSync(originalIconsDir)) {
      console.log(`⚠️ No custom icons found at ${originalIconsDir}. Using defaults.`);
      return
    }

    console.log(`Copying custom Spider-Baby icons to ${generatedIconsDir}...`);

    // 4. Ensure the destination directory exists
    fs.mkdirSync(path.dirname(generatedIconsDir), { recursive: true });

    // 5. Copy/rename our custom icons to the standard location
    fs.cpSync(originalIconsDir, generatedIconsDir, { recursive: true });

    // 6. Optional: Clean up the original icons folder if desired
    fs.rmSync(originalIconsDir, { recursive: true, force: true });

    console.log(`✅ Custom PWA icons installed successfully!`);


  } catch (error) {
    console.error(`❌ Failed to replace PWA icons: ${error}`);
    throw error; // Re-throw to handle in the calling function if needed
  }
}

//------------------------------//

export async function demoAppGenerator(
  tree: Tree,
  options: DemoAppGeneratorSchema
) {
  const normalizedOptions = normalizeOptions(options);

  // First, generate a standard Angular application
  const angularAppTask = await applicationGenerator(tree, {
    name: normalizedOptions.name,
    directory: normalizedOptions.directory, //Keep the tests and demo apps in the same directory
    style: 'scss',
    routing: true,
    strict: true,
    standalone: true,
    ssr: true,
    port: normalizedOptions.port,

    prefix: normalizedOptions.prefix,
  });

  console.log(`normalizedOptions: ${normalizedOptions}`);


  // Now add our custom demo files
  generateFiles(tree, path.join(__dirname, 'files'), normalizedOptions.directory, normalizedOptions);

  await formatFiles(tree);

  return async () => {
    // Execute the Angular app generation task
    await angularAppTask();

    try {
      await addPwaSupportAsync(normalizedOptions);

      // Replace the default PWA icons with our custom ones
      await replaceDefaultPwaIcons(normalizedOptions.directory);

    } catch (error) {
      console.error(`Somerthing went wrong:`, error);
    }

    console.log(`🎉 Demo application ${normalizedOptions.name} created successfully!`);
  };
}

//##############################################//

export default demoAppGenerator;

//##############################################//